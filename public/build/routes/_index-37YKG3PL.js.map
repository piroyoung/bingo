{
  "version": 3,
  "sources": ["../../../app/routes/_index.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_index.tsx\");\n  import.meta.hot.lastModified = \"1753694479250.6697\";\n}\n// REMIX HMR END\n\nimport { useState, useCallback } from \"react\";\nexport default function Index() {\n  _s();\n  const [bingoState, setBingoState] = useState({\n    maxNumber: 75,\n    drawnNumbers: [],\n    currentNumber: null,\n    isGameStarted: false,\n    isGameFinished: false\n  });\n  const [inputValue, setInputValue] = useState(\"75\");\n  const [error, setError] = useState(\"\");\n  const startGame = useCallback(() => {\n    const maxNum = parseInt(inputValue);\n    if (isNaN(maxNum) || maxNum < 1 || maxNum > 1000) {\n      setError(\"1\u304B\u30891000\u307E\u3067\u306E\u6570\u5B57\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044\");\n      return;\n    }\n    setError(\"\");\n    setBingoState({\n      maxNumber: maxNum,\n      drawnNumbers: [],\n      currentNumber: null,\n      isGameStarted: true,\n      isGameFinished: false\n    });\n  }, [inputValue]);\n  const drawNextNumber = useCallback(() => {\n    if (bingoState.drawnNumbers.length >= bingoState.maxNumber) {\n      setBingoState(prev => ({\n        ...prev,\n        isGameFinished: true\n      }));\n      return;\n    }\n    const availableNumbers = [];\n    for (let i = 1; i <= bingoState.maxNumber; i++) {\n      if (!bingoState.drawnNumbers.includes(i)) {\n        availableNumbers.push(i);\n      }\n    }\n    if (availableNumbers.length === 0) {\n      setBingoState(prev => ({\n        ...prev,\n        isGameFinished: true\n      }));\n      return;\n    }\n    const randomIndex = Math.floor(Math.random() * availableNumbers.length);\n    const newNumber = availableNumbers[randomIndex];\n    setBingoState(prev => ({\n      ...prev,\n      currentNumber: newNumber,\n      drawnNumbers: [...prev.drawnNumbers, newNumber],\n      isGameFinished: prev.drawnNumbers.length + 1 >= prev.maxNumber\n    }));\n  }, [bingoState.drawnNumbers, bingoState.maxNumber]);\n  const resetGame = useCallback(() => {\n    setBingoState({\n      maxNumber: 75,\n      drawnNumbers: [],\n      currentNumber: null,\n      isGameStarted: false,\n      isGameFinished: false\n    });\n    setInputValue(\"75\");\n    setError(\"\");\n  }, []);\n  const renderNumbersGrid = () => {\n    const numbers = [];\n    for (let i = 1; i <= bingoState.maxNumber; i++) {\n      numbers.push(<div key={i} className={`number-item ${bingoState.drawnNumbers.includes(i) ? 'drawn' : ''}`}>\n          {i}\n        </div>);\n    }\n    return numbers;\n  };\n  if (!bingoState.isGameStarted) {\n    return <div>\n        <h1>\uD83C\uDFAF \u30D3\u30F3\u30B4\u30B2\u30FC\u30E0</h1>\n        <div className=\"input-group\">\n          <label htmlFor=\"maxNumber\">\n            \u6570\u5B57\u306E\u7BC4\u56F2\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044\uFF08\u4F8B\uFF1A39\u30671-39\u306E\u7BC4\u56F2\uFF09\n          </label>\n          <input id=\"maxNumber\" type=\"number\" value={inputValue} onChange={e => setInputValue(e.target.value)} placeholder=\"\u4F8B: 39\" min=\"1\" max=\"1000\" />\n          {error && <div className=\"error\">{error}</div>}\n        </div>\n        <button onClick={startGame}>\u30B2\u30FC\u30E0\u958B\u59CB</button>\n      </div>;\n  }\n  return <div>\n      <h1>\uD83C\uDFAF \u30D3\u30F3\u30B4\u30B2\u30FC\u30E0</h1>\n      \n      <div className=\"game-info\">\n        <p><strong>\u6570\u5B57\u306E\u7BC4\u56F2:</strong> 1 \u301C {bingoState.maxNumber}</p>\n        <p><strong>\u62BD\u9078\u6E08\u307F:</strong> {bingoState.drawnNumbers.length} / {bingoState.maxNumber}</p>\n        <p><strong>\u6B8B\u308A:</strong> {bingoState.maxNumber - bingoState.drawnNumbers.length}</p>\n      </div>\n\n      {bingoState.currentNumber && <div className=\"current-number\">\n          <h2>\u5F53\u9078\u756A\u53F7</h2>\n          <div className=\"number\">{bingoState.currentNumber}</div>\n        </div>}\n\n      <div style={{\n      textAlign: 'center',\n      marginBottom: '20px'\n    }}>\n        <button onClick={drawNextNumber} disabled={bingoState.isGameFinished}>\n          {bingoState.currentNumber ? 'Next' : '\u6700\u521D\u306E\u756A\u53F7\u3092\u62BD\u9078'}\n        </button>\n        <button onClick={resetGame}>\u30EA\u30BB\u30C3\u30C8</button>\n      </div>\n\n      {bingoState.isGameFinished && <div style={{\n      textAlign: 'center',\n      backgroundColor: '#d4edda',\n      color: '#155724',\n      padding: '15px',\n      borderRadius: '4px',\n      margin: '20px 0',\n      border: '1px solid #c3e6cb'\n    }}>\n          <h3>\uD83C\uDF89 \u30B2\u30FC\u30E0\u7D42\u4E86\uFF01</h3>\n          <p>\u3059\u3079\u3066\u306E\u756A\u53F7\u304C\u62BD\u9078\u3055\u308C\u307E\u3057\u305F\u3002</p>\n        </div>}\n\n      {bingoState.drawnNumbers.length > 0 && <div className=\"drawn-numbers\">\n          <h3>\u62BD\u9078\u3055\u308C\u305F\u756A\u53F7</h3>\n          <div className=\"numbers-grid\">\n            {renderNumbersGrid()}\n          </div>\n        </div>}\n    </div>;\n}\n_s(Index, \"UgnQyZXt800fCar0DGPF5KzoSkc=\");\n_c = Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
